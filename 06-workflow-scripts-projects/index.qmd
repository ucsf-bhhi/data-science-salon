---
title: "Tidy Data R"
subtitle: "Data Science Salon - Session 6"
author: "Sara Colom"
date: "2024-01-31"
format: 
  revealjs:
    echo: true
---

## Outline

-   Scripts
-   Best practices for scripts
-   Keyboard shortkeys
-   Rstudio diagnostics
-   R Projects
-   Useful Packages
-   Demo



[R for Data Science Chapter 6: Workflow: scripts & projects](https://r4ds.hadley.nz/workflow-scripts)

# Preface

This workshop will introduce you to two essential tools for organizing your code in R: **scripts** and **projects**

# Scripts

  - R files that execute one or more lines of code (ext. **.R**)
  - Created to run specific tasks, ideally organized by project and task performed
  - R scripts can be easily edited in R studio's text editor, where you can run code and visualize output on the fly
  - Rstudio can automatically do code syntax highlighting and color parenthesis to make it easy to edit code 
  - Rstudio also checks for errors in code syntax which makes fixes issues related to syntax easy!


![Editing R file in Rstudio](https://r4ds.hadley.nz/diagrams/rstudio/script.png)

# Best practices

- keep separate files for groups of code that perform similar tasks
- If multiple files depend on the same lines of code to work correctly, save a file(s) with this shared code and call it in the files it depends on with `source()` 
  - **Don't** copy and paste the same code over and over across various files--hard to track and more error prone
  - If R files have a specific order they shoud run in, add a prefix that helps ID the order, e.g., `01_functions.R`, `02_functions.R` etc.
  
# More on file naming

- File names should be **machine** readable: avoid spaces, symbols, and special characters
- File names should be **human** readable: use file names to describe what 's in the file
  - "01_read_in_data.R", "02_rename_vars.R"
- File names should play well with default ordering: start the file name with numbers so that they get sorted correctly alphabetically

# Example

```r
01-load-data.R
02-exploratory-analysis.R
03-model-approach-1.R
04-model-approach-2.R
fig-01.png
fig-02.png
report-2022-03-20.qmd
report-2022-04-02.qmd
report-draft-notes.txt
```
  
# Keyboard shortcuts

  - `cntrl` + `shift` + `n` --> opens a new R script file
  - `cntrl` + `shift` + `m` --> adds a `|>` symbol
  - 

# RStudio diagnostics

  - In the script editor, RStudio highlights syntax erros with a red squiggly line and a cross in the side bar

![Error shown](https://r4ds.hadley.nz/screenshots/rstudio-diagnostic.png)

# RStudio diagnostics

  - Hover over the cross to see what the problem is

![Error description](https://r4ds.hadley.nz/screenshots/rstudio-diagnostic-tip.png)

# RStudio will also let you know about potential problems

![Warning message](https://r4ds.hadley.nz/screenshots/rstudio-diagnostic-warn.png)

# Projects

# Projects

  - Nice setup in R that allows you to keep all files associated with a given project together in one directory
  - R projects allow you to use relative paths making writing code easy and reproducible when you work with many files and collaborate with team members
  
# Making an R Project

  - Click File > New Project 
  - Give your project  Name and click on Create Project

![](https://r4ds.hadley.nz/diagrams/new-project.png)

# Making an R Project

- Think carefully about which subdirectory you put your project in
  - Projects should be stored somewhere easy to find and sensible for relating project files back to a general location
- You can check the "home" location of your project with `getwd()`

```{r}
getwd()
```

# Relative and absolute paths

