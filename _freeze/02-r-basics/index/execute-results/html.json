{
  "hash": "eadb854a62ee368a0823acf176dd0bd3",
  "result": {
    "markdown": "---\ntitle: \"R Basics\"\nsubtitle: \"Data Science Salon - Session 2\"\nauthor: \"Sara Colom\"\ndate: today\nformat: revealjs\n---\n\n\n## Outline\n\n* Coding basics\n* Data types\n* Interacting with data (Getting started with Data)\n\nChapter 3: Workflow basics  \nChapter 4: Interacting with Data\n\n![R for Data Science (via [Hadley Wickham](https://r4ds.had.co.nz/))](https://d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png)\n\n## Coding basics\n\n  * R can be used to do basic math calculations\n    * Basic arithmetic on vectors is applied to every element of the vector.\n  * In R, new objects can be created with the assignment operator `<-` \n    * RStudioâ€™s keyboard shortcut: Alt + - (the minus sign) to save time.\n\n## Examples: Basic math and operations on a vector \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 6\n```\n:::\n:::\n\n\n## Comments\n\nComments are important and used mainly as a brief description for what the following code does.\n\n  * R will ignore text after a `#` in that line, but the text can still be read by users\n  * Some short code is self explanatory and does not require any description\n  * Best practice is to explain _why_ code was written rather explaining every single line\n    * Code will often get updated, and it can be tedious to update every single comment\n\n## Comments (example)\n\n```r\n# Create a vector of even numbers between 1 and 10\neven <- c(2, 4, 6, 8, 10)\n```\n\n## What's in the name\n\n  * Object names must start with a letter and can only contain letters, numbers, and `_` and `.`\n  * Object names should be brief and descriptive--it is best to adopt a convention for multiple words, such as `snake_case`\n    * **snake_case** is where you separate lowercase words with *_*\n  * In R objects can be overwritten over and over\n\n## What's in the name\n    \n```r\n# snake_case\nraw_data\nclean_data\n\n# overwrite object x\nx <- 1\nx\nx <- 2\nx\n```\n\n## What's in the name\n\n  * R is character and case sensitive, common error is when an object is not found due to a typo\n  \n## Example\n\n```r\nx <- 1\nX\n#> Error: object 'X' not found\n```\n\n## Calling functions\n\nR has a large collection of built-in functions that work like this: `function_name(argument1 = value1, arguement2 = value2, ...)`\n\n  * For example, `head` has two argument one  `x` where it is expecting a data set as input and the output displays the first 6 rows of the input data.\n  * You can specify the input values explictley, e.g., `x = value`, or list the input(s) in the order the function expects each argument.\n  * You can learn more about what a function does by typing `?` before the function name in the console\n\n```r\nhead(x = mtcars)\nhead(mtcars)\n?head\n```\n\n## Installing/Using packages\n\n  - You can easily install packages with the `install.packages()` function from base R--which install packages from `CRAN`\n    - There is a large body of existing packages to select from in `CRAN`\n    - _however_  developmental version of packages are often readily available and can be installed in `Git`\n    - To insall packages from `Git` you will need to use functions from the `devtools` package\n    \n## Installation example\n\n```r\ninstall.packages(\"dplyr\")\n```\n\n## Loading libraries\n\n  - Libraries are not automatically loaded into your R environment (by default)\n  - You need to use `library()` function to load them in one by one\n    \n\n\n## Data types\n\nIn R there are 4 main data types:\n\n  - integer `int`\n  - character `chr`\n  - factor `fct`\n  - numeric `num`\n  - list is a combination of the above (we will cover another day)\n\n## Data types\n\n  - In R, both character and factor data types are specified in quotes, whereas integer data and numeric data are specified without quotes.\n  - Mathematical operations can only be performed on integer or numeric data.\n  - Character data is typically used to store text like features, whereas factor data is intended to have some kind of leveling structure, e.g., `Species` variable in the `iris` data\n\n## Data types\n\n  - When you read data into R, R naively tries to assign each variable a data type\n  - Unless otherwise specified, R will usually assign any variable with special characters and/or text to type `chr`\n  - Evaluating the data types of your variables after reading it in can help identify potential issues with the data \n  \n## Data types\n\n```r\ntypeof(iris$Species)\n\nstr(iris)\n```\n  \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}