---
title: "Importing Data in R"
subtitle: "Data Science Salon - Session 3"
author: "Sara Colom"
date: "2023-11-22"
format: 
  revealjs:
    echo: true
---

## Outline

-   What is tidy data?
-   Why tidy data?
-   Useful Packages
-   Reshaping data 
-   mutate (transforming variables)
-   demo

[R for Data Science Chapter 5: Data tidying](https://r4ds.hadley.nz/data-tidy)

# What is tidy data?

`tidy` data is more than just a clean data set, it is data that has been cleaned and transformed so that:

  - Each variable is a column; each column is a variable.
  - Each observation is a row; each row is an observation.
  - Each value is a cell; each cell is a single value.
  - As a result they follow easy to work with using `tidyverse` syntax (as well as base R)

# What is tidy data

![tidy data](https://r4ds.hadley.nz/images/tidy-1.png)

# Why tidy data?

  - Consistent data structures facilitate learning and applying tools to work with the data because they have an underlying uniformity (i.e. makes writing and understanding code simpler!)
  - There's a specific benefit to having each variable as a column because of R's vectorized 'nature to shine'
    - R's built in functions mainly work with vectors of values, making transforming tidy data a smooth process. 


## Examples

::: columns
::: {.column width="50%"}

```{r}
dplyr::tibble(
  country = c("Afghanistan", "Afghanistan", "Afghanistan", "Afghanistan"),
  year = c(1999, 1999, 2000, 2000),
  type = c("cases", "population", "cases", "population"),
  count = c(745, 19987071, 2666, 20595360)
)
```

:::

:::{.column width="50%"}

```{r}
dplyr::tibble(
  country = c("Afghanistan", "Afghanistan", "Brazil", "Brazil", "China", "China"),
  year = c(1999, 2000, 1999, 2000, 1999, 2000),
  cases = c(745, 2666, 37737, 80488, 212258, 213766),
  population = c(19987071, 20595360, 172006362, 174504898, 1272915272, 1280428583)
)
```

:::
:::

# Useful packages

  - `ggplot2` and `dplyr`
  - These packages are readily usable with `tidyverse`
  - Install with `install.packages()`

# Reshaping data

  - `pivot_longer` (go from wide to long format)
  - `pivot_wider` (go from long to wide format)

# Pivot longer

  
```{r}
data("USArrests")

head(USArrests)
```

# Pivot longer

```{r}
USArrests |> 
  dplyr::select(Rape, Murder, Assault) |> 
  tidyr::pivot_longer(all_of(c("Rape", "Murder", "Assault")), names_to = "crime_type", values_to = "count") |> 
  head()
```

# Pivot longer

```{r}
USArrests |> 
  tidyr::pivot_longer(all_of(c("Rape", "Murder", "Assault")), names_to = "crime_type", values_to = "count") |> 
  dplyr::group_by(crime_type) |> 
  dplyr::summarise(total_reported = sum(count))
```

```{r, include = F, echo = F, message = F, warning = F}
iris_long <- iris |> 
  janitor::clean_names() |> 
  tidyr::pivot_longer(sepal_length:petal_width, names_to = "measurement") |> 
  dplyr::mutate(id = 1:dplyr::n()) |> 
  dplyr::relocate(id)
```
# Pivot wider

```{r}
iris_long |> 
  tidyr::pivot_wider(names_from = measurement, values_from = value)
```

# Transforming variables with `mutate`  
  